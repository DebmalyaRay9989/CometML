import comet_ml
from comet_ml import Experiment

#Specifing the hyperparameters we want to tune in our algorithm
model_params ={
    "n_estimators": {
            "type": "discrete",
            "values": [110, 120, 130]
    },
    "max_depth": {
            "type": "discrete",
            "values": [3, 4, 5]
    },
    "learning_rate": {
            "type": "discrete",
            "values": [0.05, 0.1, 0.2]
    },
    "min_child_weight": {
            "type": "discrete",
            "values": [1, 2, 3]
    },
    "subsample": {
            "type": "discrete",
            "values": [0.8, 0.9, 1]
    }
}

# Specifing the parameters with want to supply to the optimizer config
optimizer_dict= {
    "algorithm": "random",
    "trials": 1,
    "parameters": model_params,
    "name": "My Random Search",
}

# Initializing our optimizer
opt = comet_ml.Optimizer(api_key=Your_API_Key,  config=optimizer_dict)

for experiment in opt.get_experiments(project_name="Tree-based ML-Optimize"):
    # Initializing XGBoost
    # Passing the each paramter to our model by using the get_parameter method from experiment 
    model = XGBRegressor(
        n_estimators=experiment.get_parameter("n_estimators"),
        max_depth=experiment.get_parameter("max_depth"),
        learning_rate=experiment.get_parameter("learning_rate"),
        min_child_weight=experiment.get_parameter("min_child_weight"),
        subsample=experiment.get_parameter("subsample"),
        random_state=42)

    # Training the model with the training set.
    my_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])
    my_pipeline.fit(X_train,y_train)  
    
    # Calculating the r2 score on the validation data
    y_val_pred = my_pipeline.predict(X_val)
    r2_val = np.round(r2_score(y_val, y_val_pred),2)
    
    # Calculating the r2 score on the training data
    y_train_pred= my_pipeline.predict(X_train)
    r2_train = np.round(r2_score(y_train, y_train_pred),2)
    
    # logging the metrics to the comet website
    experiment.log_parameter("random_state", 42)
    experiment.log_metrics({"r2_validation": np.round(r2_val,2),
                            "r2_train": np.round(r2_train,2)})
    # Ending our experiment
    experiment.end()